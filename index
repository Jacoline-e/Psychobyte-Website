<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PsychoByte | Social Media Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0a1628 0%, #1a2642 100%);
            color: #ffffff;
            overflow-x: hidden;
        }

        /* Navigation */
        nav {
            position: fixed;
            width: 100%;
            background: rgba(10, 22, 40, 0.95);
            backdrop-filter: blur(10px);
            padding: 1.5rem 5%;
            z-index: 1000;
            border-bottom: 2px solid rgba(255, 0, 128, 0.3);
        }

        nav .container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 900;
            background: linear-gradient(90deg, #FF0080, #FF8C42);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 20px rgba(255, 0, 128, 0.5);
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
        }

        .nav-links a {
            color: #ffffff;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s;
            position: relative;
        }

        .nav-links a:hover {
            color: #FF0080;
        }

        .nav-links a::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background: linear-gradient(90deg, #FF0080, #FF8C42);
            transition: width 0.3s;
        }

        .nav-links a:hover::after {
            width: 100%;
        }

        /* Hero Section */
        .hero {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 8rem 5% 4rem;
            position: relative;
            overflow: hidden;
        }

        .hero::before {
            content: '';
            position: absolute;
            width: 500px;
            height: 500px;
            background: radial-gradient(circle, rgba(255, 0, 128, 0.3), transparent);
            border-radius: 50%;
            top: 10%;
            right: -10%;
            filter: blur(80px);
            animation: float 6s ease-in-out infinite;
        }

        .hero::after {
            content: '';
            position: absolute;
            width: 400px;
            height: 400px;
            background: radial-gradient(circle, rgba(255, 140, 66, 0.3), transparent);
            border-radius: 50%;
            bottom: 10%;
            left: -10%;
            filter: blur(80px);
            animation: float 8s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-30px); }
        }

        .hero-content {
            max-width: 900px;
            position: relative;
            z-index: 1;
        }

        .hero h1 {
            font-size: 4.5rem;
            font-weight: 900;
            margin-bottom: 1.5rem;
            background: linear-gradient(90deg, #FF0080, #FF8C42);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 40px rgba(255, 0, 128, 0.5);
        }

        .hero p {
            font-size: 1.3rem;
            margin-bottom: 2.5rem;
            color: #b8c5d8;
            line-height: 1.8;
        }

        .cta-button {
            display: inline-block;
            padding: 1.2rem 3rem;
            background: linear-gradient(90deg, #FF0080, #FF8C42);
            color: white;
            text-decoration: none;
            border-radius: 50px;
            font-weight: 700;
            font-size: 1.1rem;
            transition: all 0.3s;
            box-shadow: 0 10px 30px rgba(255, 0, 128, 0.4);
            position: relative;
            overflow: hidden;
        }

        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(255, 0, 128, 0.6);
        }

        /* Services Section */
        .services {
            padding: 6rem 5%;
            background: rgba(26, 38, 66, 0.5);
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .section-title {
            text-align: center;
            font-size: 3rem;
            font-weight: 900;
            margin-bottom: 1rem;
            background: linear-gradient(90deg, #FF0080, #FF8C42);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .section-subtitle {
            text-align: center;
            font-size: 1.2rem;
            color: #b8c5d8;
            margin-bottom: 4rem;
        }

        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 2.5rem;
        }

        .service-card {
            background: rgba(255, 255, 255, 0.05);
            padding: 2.5rem;
            border-radius: 20px;
            border: 2px solid rgba(255, 0, 128, 0.2);
            transition: all 0.3s;
            backdrop-filter: blur(10px);
        }

        .service-card:hover {
            transform: translateY(-10px);
            border-color: #FF0080;
            box-shadow: 0 20px 40px rgba(255, 0, 128, 0.3);
        }

        .service-icon {
            font-size: 3rem;
            margin-bottom: 1.5rem;
        }

        .service-card h3 {
            font-size: 1.8rem;
            margin-bottom: 1rem;
            color: #FF8C42;
        }

        .service-card p {
            color: #b8c5d8;
            line-height: 1.7;
        }

        /* About Section */
        .about {
            padding: 6rem 5%;
        }

        .about-content {
            max-width: 900px;
            margin: 0 auto;
            text-align: center;
        }

        .about-content p {
            font-size: 1.2rem;
            color: #b8c5d8;
            line-height: 1.9;
            margin-bottom: 1.5rem;
        }

        /* Contact Section */
        .contact {
            padding: 6rem 5%;
            background: rgba(26, 38, 66, 0.5);
        }

        .contact-form {
            max-width: 700px;
            margin: 0 auto;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #FF8C42;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(255, 0, 128, 0.2);
            border-radius: 10px;
            color: white;
            font-size: 1rem;
            transition: all 0.3s;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #FF0080;
            box-shadow: 0 0 20px rgba(255, 0, 128, 0.3);
        }

        .form-group textarea {
            resize: vertical;
            min-height: 150px;
        }

        .submit-btn {
            width: 100%;
            padding: 1.2rem;
            background: linear-gradient(90deg, #FF0080, #FF8C42);
            color: white;
            border: none;
            border-radius: 10px;
            font-weight: 700;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .submit-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(255, 0, 128, 0.6);
        }

        /* Footer */
        footer {
            padding: 3rem 5%;
            text-align: center;
            border-top: 2px solid rgba(255, 0, 128, 0.3);
        }

        .social-links {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .social-links a {
            color: #ffffff;
            font-size: 1.8rem;
            transition: all 0.3s;
        }

        .social-links a:hover {
            color: #FF0080;
            transform: scale(1.2);
        }

        footer p {
            color: #b8c5d8;
        }

        /* Neon Brain Animation */
        #neonBrain {
            transition: transform 0.3s ease;
            display: block;
            margin: 0 auto;
        }

        #neonBrain:hover {
            transform: scale(1.05);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 2.5rem;
            }

            .nav-links {
                gap: 1rem;
                font-size: 0.9rem;
            }

            .section-title {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav>
        <div class="container">
            <div class="logo">PSYCHOBYTE</div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </div>
    </nav>

    <!-- Hero Section -->
    <section id="home" class="hero">
        <div class="hero-content">
            <canvas id="neonBrain" width="400" height="400" style="margin-bottom: 2rem; cursor: pointer;"></canvas>
            <h1>PSYCHOBYTE</h1>
            <p>Elevate your brand with cutting-edge social media management. We combine psychology and technology to create content that connects, engages, and converts.</p>
            <a href="#contact" class="cta-button">Get Started</a>
        </div>
    </section>

    <!-- Services Section -->
    <section id="services" class="services">
        <div class="container">
            <h2 class="section-title">Our Services</h2>
            <p class="section-subtitle">Comprehensive solutions for your social media success</p>
            <div class="services-grid">
                <div class="service-card">
                    <div class="service-icon">📱</div>
                    <h3>Content Creation</h3>
                    <p>Eye-catching posts, stories, and reels designed to stop the scroll and spark engagement across all platforms.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">📊</div>
                    <h3>Analytics & Strategy</h3>
                    <p>Data-driven insights to optimize your social presence and maximize ROI with proven growth strategies.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">🎯</div>
                    <h3>Community Management</h3>
                    <p>Build authentic connections with your audience through responsive engagement and meaningful interactions.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">💡</div>
                    <h3>Brand Development</h3>
                    <p>Craft a distinctive brand voice and visual identity that resonates with your target audience.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">🚀</div>
                    <h3>Campaign Management</h3>
                    <p>Launch and manage powerful marketing campaigns that drive results and amplify your brand message.</p>
                </div>
                <div class="service-card">
                    <div class="service-icon">🎨</div>
                    <h3>Graphic Design</h3>
                    <p>Professional visual content that captures attention and tells your brand story effectively.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section id="about" class="about">
        <div class="container">
            <h2 class="section-title">About PsychoByte</h2>
            <p class="section-subtitle">Where psychology meets digital innovation</p>
            <div class="about-content">
                <p>At PsychoByte, we understand that successful social media isn't just about posting—it's about understanding human behavior and leveraging cutting-edge technology to create meaningful connections.</p>
                <p>Our team combines expertise in psychology, digital marketing, and creative design to deliver social media strategies that don't just reach audiences—they resonate with them.</p>
                <p>We're passionate about helping brands discover their authentic voice and build communities that last.</p>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="contact">
        <div class="container">
            <h2 class="section-title">Get In Touch</h2>
            <p class="section-subtitle">Ready to transform your social media presence?</p>
            <form class="contact-form">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="email" required>
                </div>
                <div class="form-group">
                    <label for="message">Message</label>
                    <textarea id="message" name="message" required></textarea>
                </div>
                <button type="submit" class="submit-btn">Send Message</button>
            </form>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <div class="social-links">
            <a href="#" title="Instagram">📷</a>
            <a href="#" title="Facebook">📘</a>
            <a href="#" title="Twitter">🐦</a>
            <a href="#" title="LinkedIn">💼</a>
        </div>
        <p>&copy; 2025 PsychoByte. All rights reserved.</p>
    </footer>

    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Form submission
        document.querySelector('.contact-form').addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Thank you for your message! We will get back to you soon.');
            this.reset();
        });

        // Interactive Neon Brain
        const canvas = document.getElementById('neonBrain');
        const ctx = canvas.getContext('2d');
        const centerX = 200;
        const centerY = 200;

        // Brain structure - neurons and synapses
        let neurons = [];
        let synapses = [];
        let particles = [];
        let mouseX = 0;
        let mouseY = 0;
        let isHovering = false;

        // Create brain structure
        function createBrain() {
            neurons = [];
            synapses = [];

            // Left hemisphere neurons
            for (let i = 0; i < 15; i++) {
                const angle = (Math.PI / 15) * i - Math.PI / 2;
                const radius = 80 + Math.random() * 30;
                neurons.push({
                    x: centerX - 40 + Math.cos(angle) * radius,
                    y: centerY + Math.sin(angle) * radius,
                    size: 3 + Math.random() * 3,
                    pulse: Math.random() * Math.PI * 2,
                    pulseSpeed: 0.02 + Math.random() * 0.03,
                    connections: []
                });
            }

            // Right hemisphere neurons
            for (let i = 0; i < 15; i++) {
                const angle = (Math.PI / 15) * i - Math.PI / 2;
                const radius = 80 + Math.random() * 30;
                neurons.push({
                    x: centerX + 40 + Math.cos(angle) * radius,
                    y: centerY + Math.sin(angle) * radius,
                    size: 3 + Math.random() * 3,
                    pulse: Math.random() * Math.PI * 2,
                    pulseSpeed: 0.02 + Math.random() * 0.03,
                    connections: []
                });
            }

            // Create synapses (connections)
            neurons.forEach((neuron, i) => {
                neurons.forEach((other, j) => {
                    if (i !== j) {
                        const dist = Math.hypot(neuron.x - other.x, neuron.y - other.y);
                        if (dist < 100 && Math.random() > 0.7) {
                            synapses.push({
                                from: neuron,
                                to: other,
                                active: Math.random() > 0.5,
                                flow: Math.random()
                            });
                        }
                    }
                });
            });
        }

        // Draw brain outline
        function drawBrainOutline() {
            ctx.strokeStyle = '#FF0080';
            ctx.lineWidth = 4;
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#FF0080';

            // Left hemisphere
            ctx.beginPath();
            ctx.arc(centerX - 40, centerY, 100, Math.PI * 0.7, Math.PI * 1.8, false);
            ctx.bezierCurveTo(
                centerX - 140, centerY + 80,
                centerX - 130, centerY - 80,
                centerX - 40, centerY - 100
            );
            ctx.stroke();

            // Right hemisphere
            ctx.beginPath();
            ctx.arc(centerX + 40, centerY, 100, Math.PI * 1.2, Math.PI * 0.3, true);
            ctx.bezierCurveTo(
                centerX + 140, centerY - 80,
                centerX + 130, centerY + 80,
                centerX + 40, centerY + 100
            );
            ctx.stroke();

            // Corpus callosum (center connection)
            ctx.strokeStyle = '#FF4B6E';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(centerX - 30, centerY - 50);
            ctx.quadraticCurveTo(centerX, centerY - 60, centerX + 30, centerY - 50);
            ctx.stroke();
        }

        // Draw synapses
        function drawSynapses() {
            synapses.forEach(synapse => {
                synapse.flow += 0.02;
                if (synapse.flow > 1) synapse.flow = 0;

                const gradient = ctx.createLinearGradient(
                    synapse.from.x, synapse.from.y,
                    synapse.to.x, synapse.to.y
                );
                
                gradient.addColorStop(0, '#FF008020');
                gradient.addColorStop(synapse.flow, '#FF8C42');
                gradient.addColorStop(1, '#FF008020');

                ctx.strokeStyle = gradient;
                ctx.lineWidth = synapse.active ? 2 : 1;
                ctx.shadowBlur = synapse.active ? 10 : 5;
                ctx.shadowColor = '#FF0080';

                ctx.beginPath();
                ctx.moveTo(synapse.from.x, synapse.from.y);
                ctx.lineTo(synapse.to.x, synapse.to.y);
                ctx.stroke();
            });
        }

        // Draw neurons
        function drawNeurons() {
            neurons.forEach(neuron => {
                neuron.pulse += neuron.pulseSpeed;
                const pulseSize = neuron.size + Math.sin(neuron.pulse) * 2;

                // Glow effect
                const gradient = ctx.createRadialGradient(
                    neuron.x, neuron.y, 0,
                    neuron.x, neuron.y, pulseSize * 3
                );
                gradient.addColorStop(0, '#FF0080');
                gradient.addColorStop(0.5, '#FF4B6E50');
                gradient.addColorStop(1, 'transparent');

                ctx.fillStyle = gradient;
                ctx.beginPath();
                ctx.arc(neuron.x, neuron.y, pulseSize * 3, 0, Math.PI * 2);
                ctx.fill();

                // Neuron core
                ctx.fillStyle = '#FFA500';
                ctx.shadowBlur = 15;
                ctx.shadowColor = '#FFA500';
                ctx.beginPath();
                ctx.arc(neuron.x, neuron.y, pulseSize, 0, Math.PI * 2);
                ctx.fill();
            });
        }

        // Draw particles (electrical signals)
        function drawParticles() {
            particles = particles.filter(p => p.life > 0);
            
            particles.forEach(particle => {
                particle.x += particle.vx;
                particle.y += particle.vy;
                particle.life -= 0.02;

                ctx.fillStyle = `rgba(255, ${140 + particle.life * 115}, 66, ${particle.life})`;
                ctx.shadowBlur = 20;
                ctx.shadowColor = '#FF8C42';
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, 3, 0, Math.PI * 2);
                ctx.fill();
            });
        }

        // Animation loop
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            drawBrainOutline();
            drawSynapses();
            drawNeurons();
            drawParticles();

            requestAnimationFrame(animate);
        }

        // Mouse interaction
        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
            mouseY = e.clientY - rect.top;
            isHovering = true;
        });

        canvas.addEventListener('mouseleave', () => {
            isHovering = false;
        });

        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const clickY = e.clientY - rect.top;

            // Create explosion of particles
            for (let i = 0; i < 30; i++) {
                const angle = (Math.PI * 2 / 30) * i;
                particles.push({
                    x: clickX,
                    y: clickY,
                    vx: Math.cos(angle) * (2 + Math.random() * 3),
                    vy: Math.sin(angle) * (2 + Math.random() * 3),
                    life: 1
                });
            }

            // Activate random synapses
            synapses.forEach(synapse => {
                if (Math.random() > 0.5) {
                    synapse.active = !synapse.active;
                }
            });
        });

        // Initialize
        createBrain();
        animate();
    </script>
</body>
</html>
